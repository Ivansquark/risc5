$date
	Tue Jun  7 16:55:17 2022
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module test_single_cycle $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module processor0 $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 # rx $end
$var wire 32 $ single_reg [31:0] $end
$var wire 1 % tx $end
$var wire 32 & ram_write_data [31:0] $end
$var wire 1 ' ram_we $end
$var wire 32 ( ram_read_data [31:0] $end
$var wire 32 ) pc [31:0] $end
$var wire 2 * mem_ctrl [1:0] $end
$var wire 8 + led_out [7:0] $end
$var wire 32 , instr [31:0] $end
$var wire 32 - alu_res [31:0] $end
$scope module core0 $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 . zero $end
$var wire 3 / res_src [2:0] $end
$var wire 1 0 reg_file_we $end
$var wire 32 1 ram_write_data [31:0] $end
$var wire 1 ' ram_we $end
$var wire 32 2 ram_read_data [31:0] $end
$var wire 2 3 pc_src [1:0] $end
$var wire 32 4 pc [31:0] $end
$var wire 3 5 mem_ctrl_from_decoder [2:0] $end
$var wire 2 6 mem_ctrl [1:0] $end
$var wire 7 7 instr_op [6:0] $end
$var wire 25 8 instr_imm [31:7] $end
$var wire 1 9 instr_func7 $end
$var wire 3 : instr_func3 [14:12] $end
$var wire 5 ; instr_A3 [11:7] $end
$var wire 5 < instr_A2 [24:20] $end
$var wire 5 = instr_A1 [19:15] $end
$var wire 32 > instr [31:0] $end
$var wire 3 ? imm_src [2:0] $end
$var wire 1 @ alu_src $end
$var wire 32 A alu_res [31:0] $end
$var wire 4 B alu_ctrl [3:0] $end
$scope module datapath0 $end
$var wire 32 C alu_res [31:0] $end
$var wire 1 ! clk $end
$var wire 5 D instr_A1 [19:15] $end
$var wire 5 E instr_A2 [24:20] $end
$var wire 5 F instr_A3 [11:7] $end
$var wire 25 G instr_imm [31:7] $end
$var wire 32 H pc_out [31:0] $end
$var wire 1 " reset $end
$var wire 32 I write_data [31:0] $end
$var wire 1 . zero $end
$var wire 32 J rs2 [31:0] $end
$var wire 3 K res_src [2:0] $end
$var wire 32 L res_res [31:0] $end
$var wire 1 0 reg_file_we3 $end
$var wire 32 M rd2 [31:0] $end
$var wire 32 N rd1 [31:0] $end
$var wire 32 O ram_read_data [31:0] $end
$var wire 32 P pc_target [31:0] $end
$var wire 2 Q pc_src [1:0] $end
$var wire 32 R pc_plus4 [31:0] $end
$var wire 32 S pc_next [31:0] $end
$var wire 32 T pc [31:0] $end
$var wire 3 U mem_ctrl [2:0] $end
$var wire 2 V low_ram_address [1:0] $end
$var wire 32 W load_module_out [31:0] $end
$var wire 3 X imm_src [2:0] $end
$var wire 32 Y imm_ext [31:0] $end
$var wire 1 @ alu_src $end
$var wire 32 Z alu_res_internal [31:0] $end
$var wire 4 [ alu_ctrl [3:0] $end
$scope module alu_src_mux0 $end
$var wire 32 \ rd2 [31:0] $end
$var wire 32 ] imm_ext [31:0] $end
$var wire 1 @ alu_src $end
$var wire 32 ^ alu_rs2 [31:0] $end
$upscope $end
$scope module imm_sign_ext0 $end
$var wire 25 _ instr [31:7] $end
$var wire 3 ` imm_src [2:0] $end
$var reg 32 a imm_out [31:0] $end
$upscope $end
$scope module load_module0 $end
$var wire 2 b low_address [1:0] $end
$var wire 3 c load_enable [2:0] $end
$var wire 32 d in [31:0] $end
$var reg 32 e out [31:0] $end
$upscope $end
$scope module pc_mux0 $end
$var wire 32 f pc_target [31:0] $end
$var wire 2 g pc_src [1:0] $end
$var wire 32 h pc_prev [31:0] $end
$var wire 32 i pc_plus4 [31:0] $end
$var wire 32 j pc_alu [31:0] $end
$var reg 32 k pc_next [31:0] $end
$upscope $end
$scope module pc_plus4_adder0 $end
$var wire 32 l pc_prev [31:0] $end
$var wire 32 m pc_next [31:0] $end
$upscope $end
$scope module pc_reg0 $end
$var wire 1 ! clk $end
$var wire 32 n pc_prev [31:0] $end
$var wire 1 " reset $end
$var reg 32 o pc_next [31:0] $end
$upscope $end
$scope module pc_target_adder0 $end
$var wire 32 p imm_ext [31:0] $end
$var wire 32 q pc_next [31:0] $end
$var wire 32 r pc_target [31:0] $end
$upscope $end
$scope module regfile0 $end
$var wire 5 s a1 [4:0] $end
$var wire 5 t a2 [4:0] $end
$var wire 5 u a3 [4:0] $end
$var wire 1 ! clk $end
$var wire 1 0 we3 $end
$var wire 32 v wd3 [31:0] $end
$var reg 32 w rd1 [31:0] $end
$var reg 32 x rd2 [31:0] $end
$var integer 32 y i [31:0] $end
$upscope $end
$scope module result_mux0 $end
$var wire 32 z alu_res [31:0] $end
$var wire 32 { imm_auipc [31:0] $end
$var wire 32 | imm_lui [31:0] $end
$var wire 32 } mem [31:0] $end
$var wire 32 ~ pc_plus4 [31:0] $end
$var wire 3 !" res_src [2:0] $end
$var reg 32 "" res [31:0] $end
$upscope $end
$scope module rv_alu0 $end
$var wire 32 #" rs1 [31:0] $end
$var wire 32 $" rs2 [31:0] $end
$var wire 32 %" sub_res [31:0] $end
$var wire 32 &" rd [31:0] $end
$var wire 4 '" op_in [3:0] $end
$var reg 32 (" result_r [31:0] $end
$var reg 1 . zero $end
$upscope $end
$upscope $end
$scope module decoder0 $end
$var wire 3 )" funct3 [14:12] $end
$var wire 1 9 funct7 $end
$var wire 7 *" op [6:0] $end
$var wire 1 . zero $end
$var reg 4 +" alu_ctrl [3:0] $end
$var reg 1 @ alu_src $end
$var reg 3 ," imm_src [2:0] $end
$var reg 3 -" mem_ctrl [2:0] $end
$var reg 1 ' mem_we $end
$var reg 2 ." pc_src [1:0] $end
$var reg 1 0 reg_file_we $end
$var reg 3 /" res_src [2:0] $end
$upscope $end
$upscope $end
$scope module io_ram_datapath0 $end
$var wire 32 0" address [31:0] $end
$var wire 1 ! clk $end
$var wire 2 1" mem_ctrl [1:0] $end
$var wire 1 # rx $end
$var wire 32 2" wd [31:0] $end
$var wire 1 ' we $end
$var wire 1 3" we_uart $end
$var wire 1 4" we_ram $end
$var wire 1 5" we_led $end
$var wire 3 6" uart_reg_mux_out [2:0] $end
$var wire 1 % tx $end
$var wire 32 7" rd_uart [31:0] $end
$var wire 32 8" rd_ram [31:0] $end
$var wire 32 9" rd [31:0] $end
$var wire 1 :" load_mux $end
$var wire 8 ;" led_out [7:0] $end
$var wire 32 <" address_to_ram [31:0] $end
$scope module io_ram_decoder0 $end
$var wire 32 =" address [31:0] $end
$var wire 1 ' we $end
$var wire 1 >" isRam $end
$var wire 1 ?" isIO $end
$var reg 32 @" address_to_ram [31:0] $end
$var reg 1 :" load_mux $end
$var reg 3 A" uart_reg_mux_out [2:0] $end
$var reg 1 5" we_led $end
$var reg 1 4" we_ram $end
$var reg 1 3" we_uart $end
$upscope $end
$scope module led0 $end
$var wire 8 B" led_in [7:0] $end
$var wire 1 5" we $end
$var reg 8 C" led_out [7:0] $end
$upscope $end
$scope module load_mux0 $end
$var wire 1 :" in $end
$var wire 32 D" loaded_data [31:0] $end
$var wire 32 E" data_uart [31:0] $end
$var wire 32 F" data_ram [31:0] $end
$upscope $end
$scope module ram0 $end
$var wire 32 G" address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 H" data_in [31:0] $end
$var wire 2 I" mem_ctrl [1:0] $end
$var wire 1 4" we $end
$var wire 30 J" word_addr [29:0] $end
$var reg 32 K" data_out [31:0] $end
$var integer 32 L" i [31:0] $end
$upscope $end
$scope module uart0 $end
$var wire 32 M" baud [31:0] $end
$var wire 1 ! clk $end
$var wire 3 N" reg_num [2:0] $end
$var wire 1 # rx $end
$var wire 1 % tx $end
$var wire 32 O" wd [31:0] $end
$var wire 1 3" we $end
$var wire 1 P" rx_not_empty $end
$var wire 8 Q" rx_data [7:0] $end
$var reg 1 R" Tx $end
$var reg 32 S" baud_counter_clk [31:0] $end
$var reg 32 T" baud_counter_tx [31:0] $end
$var reg 1 U" brr_clk $end
$var reg 1 V" current_bit $end
$var reg 1 W" is_need_start_tx $end
$var reg 1 X" is_rx_started $end
$var reg 1 Y" is_tx_started $end
$var reg 32 Z" rd [31:0] $end
$var reg 4 [" rx_counter [3:0] $end
$var reg 8 \" shift_transmit [7:0] $end
$var reg 4 ]" tx_counter [3:0] $end
$var integer 32 ^" i [31:0] $end
$scope module shift_reg_rx $end
$var wire 1 U" clk $end
$var wire 1 _" load $end
$var wire 8 `" par_in [7:0] $end
$var wire 1 # ser_in $end
$var wire 1 a" ser_out $end
$var reg 8 b" par_out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module rom0 $end
$var wire 32 c" address [31:0] $end
$var wire 32 d" instruction [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b110000000000000110010011 d"
b0 c"
bzxxxxxxx b"
xa"
bz `"
z_"
b101 ^"
b0 ]"
b0 \"
b0 ["
bx Z"
0Y"
0X"
0W"
xV"
1U"
b0 T"
b0 S"
1R"
bzxxxxxxx Q"
0P"
b0 O"
bx N"
b0 M"
b10000 L"
bx K"
b11 J"
b0 I"
b0 H"
b1100 G"
bx F"
bx E"
bx D"
bx C"
b0 B"
bx A"
b1100 @"
0?"
1>"
b1100 ="
b1100 <"
bx ;"
0:"
bx 9"
bx 8"
bx 7"
bx 6"
05"
04"
03"
b0 2"
b0 1"
b1100 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b10011 *"
b0 )"
b1100 ("
b0 '"
b1100 &"
b11111111111111111111111111110100 %"
b1100 $"
b0 #"
b1100 ""
b0 !"
b100 ~
bx }
b1100 |
b1100 {
b1100 z
b100000 y
b0 x
b0 w
b1100 v
b11 u
b1100 t
b0 s
b1100 r
b0 q
b1100 p
b0 o
b100 n
b0 m
b100 l
b100 k
b1100 j
b100 i
b0 h
b0 g
b1100 f
bx e
bx d
b0 c
b0 b
b1100 a
b0 `
b11000000000000011 _
b1100 ^
b1100 ]
b0 \
b0 [
b1100 Z
b1100 Y
b0 X
bx W
b0 V
b0 U
b0 T
b100 S
b100 R
b0 Q
b1100 P
bx O
b0 N
b0 M
b1100 L
b0 K
b1100 J
b0 I
b0 H
b11000000000000011 G
b11 F
b1100 E
b0 D
b1100 C
b0 B
b1100 A
1@
b0 ?
b110000000000000110010011 >
b0 =
b1100 <
b11 ;
b0 :
09
b11000000000000011 8
b10011 7
b0 6
b0 5
b0 4
b0 3
bx 2
b0 1
10
b0 /
0.
b1100 -
b110000000000000110010011 ,
bx +
b0 *
b0 )
bx (
0'
b0 &
1%
bz $
z#
1"
0!
$end
#10
b0 J"
b0 <"
b0 @"
b0 G"
b0 L
b0 v
b0 ""
b0 -
b0 A
b0 C
b0 z
b0 0"
b0 ="
b0 Z
b0 j
b0 &"
b0 ("
b0 %"
b0 J
b0 ^
b0 $"
b10 Y
b10 ]
b10 a
b10 p
b10 |
b1000 B
b1000 [
b1000 '"
b1000 +"
0@
10
b100011101000100 8
b100011101000100 G
b100011101000100 _
b100 ;
b100 F
b100 u
b10 <
b10 E
b10 t
b111 =
b111 D
b111 s
b10 :
b10 )"
b110011 7
b110011 *"
b0 W
b0 e
b0 }
b1000111010001000110011 ,
b1000111010001000110011 >
b1000111010001000110011 d"
b1000 S
b1000 k
b1000 n
b0 (
b0 2
b0 O
b0 d
b0 9"
b0 D"
b110 P
b110 f
b110 r
b110 {
b1000 R
b1000 i
b1000 l
b1000 ~
b100 )
b100 4
b100 H
b100 c"
b100 T
b100 h
b100 m
b100 o
b100 q
b0 8"
b0 F"
b0 K"
1!
#20
0U"
0!
#30
bzxxxxxx Q"
bzxxxxxx b"
b101 Y
b101 ]
b101 a
b101 p
b101 |
b0 B
b0 [
b0 '"
b0 +"
10
b1010010000000111 8
b1010010000000111 G
b1010010000000111 _
b111 ;
b111 F
b111 u
b101 <
b101 E
b101 t
b100 =
b100 D
b100 s
b0 :
b0 )"
b10100100000001110110011 ,
b10100100000001110110011 >
b10100100000001110110011 d"
b1100 S
b1100 k
b1100 n
1U"
b1101 P
b1101 f
b1101 r
b1101 {
b1100 R
b1100 i
b1100 l
b1100 ~
b1000 )
b1000 4
b1000 H
b1000 c"
b1000 T
b1000 h
b1000 m
b1000 o
b1000 q
1!
#40
0U"
0!
